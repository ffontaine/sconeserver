AC_INIT(SconeServer,0.9.9,wedge@sconemad.com)

AC_PREREQ(2.57)
AC_CONFIG_SRCDIR([sconex/sconex.h])

AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED([TARGET],["$target"],[Target Architecture])

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_DISABLE_STATIC

# Programs
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_LANG_CPLUSPLUS
PKG_PROG_PKG_CONFIG

# Use this to disable all optimisations in order to run with valgrind
AC_ARG_ENABLE([valgrind],
  [AC_HELP_STRING([--enable-valgrind],[Enable valgrind mode (no optimisations)])],
  [CXXFLAGS="-g -O0"]
)

# Enable address sanitizer
AC_ARG_ENABLE([asan],
  [AC_HELP_STRING([--enable-asan],[Enable address sanitizer])],
  [CXXFLAGS="-g -O0 -fsanitize=address -fno-omit-frame-pointer"
  LDFLAGS="-fsanitize=address -fno-omit-frame-pointer"]
)

# Enable all warnings
CXXFLAGS="$CXXFLAGS -Wall"

# Libraries
AC_CHECK_LIB([dl],[dlopen])

AC_CHECK_LIB([pthread],[pthread_create])
AC_CHECK_LIB([c_r],[pthread_create],
  [LIBS="$LIBS -pthread"
  AC_DEFINE(HAVE_LIBPTHREAD)]
)

AC_CHECK_FUNCS([gethostbyname],,
  [AC_CHECK_LIB([nsl],[gethostbyname],,
    [AC_CHECK_LIB([socket],[gethostbyname])]
  )]
)
AC_CHECK_FUNCS([setsockopt],,
  [AC_CHECK_LIB([socket],[setsockopt])]
)
AC_CHECK_LIB([pcre],[pcre_compile],,
  [AC_MSG_ERROR([library 'libpcre' is required])]
)
AC_CHECK_LIB([crypt],[crypt],,
  [AC_MSG_ERROR([library 'libcrypt' is required])]
)

# Not all C libraries have crypt_r
AC_CHECK_FUNC(crypt_r, system_crypt_r="yes", system_crypt_r="no")
AC_CHECK_LIB(crypt, crypt_r, have_crypt_r_lib="yes", have_crypt_r_lib="no")
if test "$system_crypt_r $have_crypt_r_lib" != "no no"; then
   AC_DEFINE(HAVE_CRYPT_R, 1, [Have crypt_r function])
fi

# server module
# Always include this unless explicitly told not to
AC_ARG_WITH([ip],
  [AC_HELP_STRING([--with-server],[Enable server])],
  [SERVER="$withval"],
  [SERVER="yes"]
)

# ip module
# Always include this unless explicitly told not to
AC_ARG_WITH([ip],
  [AC_HELP_STRING([--with-ip],[Enable IP4 sockets])],
  [IP="$withval"],
  [IP="yes"]
)

# ip6 module
# Include if ip6 headers are present
AC_ARG_WITH([ip6],
  [AC_HELP_STRING([--with-ip6],[Enable IP6 sockets])],
  [IP6="$withval"],
  [AC_CHECK_HEADER([netinet/ip6.h],[IP6="yes"],[IP6="no"])]
)

# local module
# Always include this unless explicitly told not to
AC_ARG_WITH([local],
  [AC_HELP_STRING([--with-local],[Enable local (UNIX domain) sockets])],
  [LOCAL="$withval"],
  [LOCAL="yes"]
)

# location module
# Include if GPS headers are present
AC_ARG_WITH([location],
  [AC_HELP_STRING([--with-location],[Enable location module])],
  [LOCATION="$withval"],
  [LOCATION="check"]
)
if test "x$LOCATION" = "xyes" -o "x$LOCATION" = "xcheck"; then
  PKG_CHECK_MODULES(
    [LOCATION], [libgps],
    [LOCATION=yes],
    [if test "x$LOCATION" = "xyes"; then
      AC_MSG_FAILURE([$LOCATION_PKG_ERRORS])
     else
      AC_MSG_WARN([$LOCATION_PKG_ERRORS])
     fi
     LOCATION="no"])
fi

# bluetooth module
# Include if bluetooth headers are present
AC_ARG_WITH([bluetooth],
  [AC_HELP_STRING([--with-bluetooth],[Enable bluetooth sockets])],
  [BLUETOOTH="$withval"],
  [AC_CHECK_HEADER([bluetooth/bluetooth.h],[BLUETOOTH="yes"],[BLUETOOTH="no"])]
)

# SSL module
# Include if OpenSSL headers are found
AC_ARG_WITH([ssl],
  [AC_HELP_STRING([--with-ssl],[Enable secure sockets module])],
  [SSL="$withval"],
  [SSL="check"]
)
if test "x$SSL" = "xyes" -o "x$SSL" = "xcheck"; then
  PKG_CHECK_MODULES(
    [SSL], [openssl],
    [SSL=yes],
    [if test "x$SSL" = "xyes"; then
      AC_MSG_FAILURE([$SSL_PKG_ERRORS])
     else
      AC_MSG_WARN([$SSL_PKG_ERRORS])
     fi
     SSL="no"])
fi

# Example modules
# Always build these unless explicitly told not to
AC_ARG_WITH([examples],
  [AC_HELP_STRING([--with-examples],[Enable building of example code])],
  [EXAMPLES="$withval"],
  [EXAMPLES="yes"]
)

# TestBuilder module
AC_ARG_WITH([testbuilder],
  [AC_HELP_STRING([--with-testbuilder],[Enable TestBuilder module])],
  [TESTBUILDER="$withval"],
  [TESTBUILDER="yes"]
)

# Lettuce module
AC_ARG_WITH([lettuce],
  [AC_HELP_STRING([--with-lettuce],[Enable Lettuce module])],
  [LETTUCE="$withval"],
  [LETTUCE="yes"]
)

# Look for libxml2 settings
AC_ARG_WITH([xml2-config],
  [AC_HELP_STRING([--with-xml2-config=PATH],[Set path to xml2-config])],
  [XML2_CONFIG="$withval"],
  [XML2_CONFIG="xml2-config"]
)
AC_CHECK_LIB([xml2],[xmlNewDoc],
  [CPPFLAGS="$CPPFLAGS `$XML2_CONFIG --cflags`"],,
)

# Look for libxml2 headers
AC_CHECK_HEADER([libxml/parser.h],,)

# Sconesite module
AC_ARG_WITH([sconesite],
  [AC_HELP_STRING([--with-sconesite],[Enable Sconesite module])],
  [SCONESITE="$withval"],
  [SCONESITE="yes"]
)

# Check we have libxml2 if Sconesite is enabled
if test "x$SCONESITE" = "xyes"; then
  if test "x$ac_cv_lib_xml2_xmlNewDoc" != "xyes"; then
    AC_MSG_ERROR([library 'libxml2' is required for Sconesite])
  fi
  if test "x$ac_cv_header_libxml_parser_h" != "xyes"; then
    AC_MSG_ERROR([library 'libxml2' headers are required for Sconesite])
  fi
fi

# Check for ImageMagick
AC_ARG_WITH([Magick++-config],
  [AC_HELP_STRING([--with-Magick++-config=PATH],[Set path to Magick++-config])],
  [MAGICK_CONFIG="$withval"],
  [MAGICK_CONFIG="Magick++-config"]
)
AC_CHECK_PROG([MAGICK], ["$MAGICK_CONFIG"], [yes], [no])
if test "x$MAGICK" = "xyes"; then
  MAGICK_CFLAGS=`$MAGICK_CONFIG --cppflags`
  MAGICK_LDFLAGS=`$MAGICK_CONFIG --ldflags`
  MAGICK_LIBS=`$MAGICK_CONFIG --libs`
fi

# Image module
AC_ARG_WITH([image],
  [AC_HELP_STRING([--with-image],[Enable image module])],
  [IMAGE="$withval"],
  [IMAGE="$MAGICK"]
)

# Need ImageMagick for image
if test "x$IMAGE" = "xyes"; then
  if test "x$MAGICK" != "xyes"; then
    AC_MSG_ERROR([library 'Magick++' is required for image])
  fi
  CXXFLAGS="$CXXFLAGS $MAGICK_CFLAGS"
  IMAGE_LDFLAGS=$MAGICK_LDFLAGS
  AC_SUBST(IMAGE_LDFLAGS)
  IMAGE_LDFLAGS=$MAGICK_LIBS
  AC_SUBST(IMAGE_LIBS)
fi

# rss module
AC_ARG_WITH([rss],
  [AC_HELP_STRING([--with-rss],[Enable rss module])],
  [RSS="$withval"],
  [RSS="yes"]
)
# Need libxml2 library for rss
if test "x$RSS" = "xyes"; then
  if test "x$ac_cv_lib_xml2_xmlNewDoc" != "xyes"; then
    AC_MSG_ERROR([library 'libxml2' is required for the rss module])
  fi
  if test "x$ac_cv_header_libxml_parser_h" != "xyes"; then
    AC_MSG_ERROR([library 'libxml2' is required for the rss module])
  fi
fi

# markdown module
# Include by default if cmark submodule is present
AC_ARG_WITH([markdown],
  [AC_HELP_STRING([--with-markdown],[Enable markdown module])],
  [MARKDOWN="$withval"],
  [AC_CHECK_FILE([markdown/cmark/Makefile],[MARKDOWN="yes"],[MARKDOWN="no"])]
)

# MySql module
# Include by default if mysqlclient headers are found
AC_ARG_WITH([mysql_config],
  [AC_HELP_STRING([--with-mysql_config=PATH],[Set path to mysql_config])],
  [MYSQL_CONFIG="$withval"],
  [MYSQL_CONFIG="mysql_config"]
)
AC_ARG_WITH([mysql],
  [AC_HELP_STRING([--with-mysql],[Enable MySQL Database module])],
  [MYSQL="$withval"],
  [AC_CHECK_HEADER([mysql/mysql.h],[MYSQL="yes"],[MYSQL="no"])]
)
# Need mysqlclient library for mysql
if test "x$MYSQL" = "xyes"; then
  AC_CHECK_LIB([mysqlclient],[mysql_init],
    [CXXFLAGS="$CXXFLAGS `$MYSQL_CONFIG --cflags`"
     MYSQL_LIBADD=`$MYSQL_CONFIG --libs`
     AC_SUBST(MYSQL_LIBADD)],
    [AC_MSG_ERROR([library 'mysqlclient' is required for the mysql module])]
  )
fi

# SQLite module
# Include by default if sqlite3 headers are found
AC_ARG_WITH([sqlite],
  [AC_HELP_STRING([--with-sqlite],[Enable SQLite database module])],
  [SQLITE="$withval"],
  [AC_CHECK_HEADER([sqlite3.h],[SQLITE="yes"],[SQLITE="no"])]
)
# Need sqlite3 library for sqlite
if test "x$SQLITE" = "xyes"; then
  AC_CHECK_LIB([sqlite3],[sqlite3_open_v2],
    [SQLITE_LIBADD="-lsqlite3"
     AC_SUBST(SQLITE_LIBADD)],
    [AC_MSG_ERROR([library 'sqlite3' is required for the sqlite module])]
  )
fi

# Maths module 
# depends on libmpfr and libgmp (libmpfr-dev and libgmp-dev in Debian)
# Include by default if libmpfr headers are found
AC_ARG_WITH([maths],
  [AC_HELP_STRING([--with-maths],[Enable Maths module])],
  [MATHS="$withval"],
  [AC_CHECK_HEADER([mpfr.h],[MATHS="yes"],[MATHS="no"])]
)
# Need libgmp and libmpfr library for maths
if test "x$MATHS" = "xyes"; then
  AC_CHECK_LIB([mpfr],[mpfr_init],
    [MATHS_LIBADD="-lgmp -lmpfr"
     AC_SUBST(MATHS_LIBADD)],
    [AC_MSG_ERROR([libraries 'mpfr' and 'gmp' are required for the maths module])]
  )
fi

# Ui module 
# depends on libX11
# Include by default if X headers are found
AC_ARG_WITH([ui],
  [AC_HELP_STRING([--with-ui],[Enable ui module])],
  [UI="$withval"],
  [AC_CHECK_HEADER([X11/Xlib.h],[UI="yes"],[UI="no"])]
)
# Need libX11 library for ui
if test "x$UI" = "xyes"; then
  AC_CHECK_LIB([X11],[XOpenDisplay],
    [UI_LIBADD="-lX11"
     AC_SUBST(UI_LIBADD)],
    [AC_MSG_ERROR([library 'X11' is required for the ui module])]
  )
fi

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([arpa/inet.h errno.h fcntl.h malloc.h netdb.h netinet/in.h])
AC_CHECK_HEADERS([stdlib.h sys/ioctl.h sys/socket.h sys/stat.h sys/signal.h])
AC_CHECK_HEADERS([sys/types.h sys/wait.h sys/uio.h signal.h stdio.h])
AC_CHECK_HEADERS([pthread.h unistd.h])
AC_CHECK_HEADERS([string iostream iomanip fstream sstream map list queue stack set])
AC_CHECK_HEADERS([tr1/unordered_map ext/hash_map])
AC_CHECK_HEADERS([sys/utsname.h typeinfo cxxabi.h])
AC_CHECK_HEADERS([crypt.h shadow.h])
AC_CHECK_HEADERS([math.h limits.h])
AC_CHECK_HEADERS([pcre.h pcre/pcre.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_FUNC_STAT

AC_CHECK_FUNCS([dup2 gethostbyaddr gethostbyname memmove memset select socket])
AC_CHECK_FUNCS([inet_aton inet_pton inet_ntop])

AC_CACHE_CHECK(
  [for msg_control in msghdr],
  [ol_cv_msghdr_msg_control],
  [AC_COMPILE_IFELSE(
    [#include <sys/types.h>
     #include <sys/socket.h>
     int main(int,char**) {
       struct msghdr m;
       m.msg_control=(struct cmsghdr *)0;
     }],
    [ol_cv_msghdr_msg_control=yes],
    [ol_cv_msghdr_msg_control=no])])
if test $ol_cv_msghdr_msg_control = "yes" ; then
  AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL,1,[define if struct msghdr has msg_control]\
)
fi

AC_CACHE_CHECK(
  [for socklen_t],
  [ac_cv_c_socklen_t],
  [AC_COMPILE_IFELSE(
    [#include <sys/types.h>
     #include <sys/socket.h>
     int main(int,char**) {
       socklen_t sl;
     }],
    [ac_cv_c_socklen_t=yes],
    [ac_cv_c_socklen_t=no])])
if test $ac_cv_c_socklen_t = "no" ; then
  AC_DEFINE(socklen_t,unsigned int,[define socklen_t to unsigned int if not present])
fi

# Set module build flags
AM_CONDITIONAL(BUILD_SERVER, test x$SERVER = xyes)
AM_CONDITIONAL(BUILD_IP, test x$IP = xyes)
AM_CONDITIONAL(BUILD_IP6, test x$IP6 = xyes)
AM_CONDITIONAL(BUILD_LOCAL, test x$LOCAL = xyes)
AM_CONDITIONAL(BUILD_LOCATION, test x$LOCATION = xyes)
AM_CONDITIONAL(BUILD_BLUETOOTH, test x$BLUETOOTH = xyes)
AM_CONDITIONAL(BUILD_SSL, test x$SSL = xyes)
AM_CONDITIONAL(BUILD_EXAMPLES, test x$EXAMPLES = xyes)
AM_CONDITIONAL(BUILD_TESTBUILDER, test x$TESTBUILDER = xyes)
AM_CONDITIONAL(BUILD_LETTUCE, test x$LETTUCE = xyes)
AM_CONDITIONAL(BUILD_SCONESITE, test x$SCONESITE = xyes)
AM_CONDITIONAL(BUILD_IMAGE, test x$IMAGE = xyes)
AM_CONDITIONAL(BUILD_RSS, test x$RSS = xyes)
AM_CONDITIONAL(BUILD_MARKDOWN, test x$MARKDOWN = xyes)
AM_CONDITIONAL(BUILD_MYSQL, test x$MYSQL = xyes)
AM_CONDITIONAL(BUILD_SQLITE, test x$SQLITE = xyes)
AM_CONDITIONAL(BUILD_MATHS, test x$MATHS = xyes)
AM_CONDITIONAL(BUILD_UI, test x$UI = xyes)

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([sconex/Makefile])
AC_CONFIG_FILES([examples/Makefile])
AC_CONFIG_FILES([examples/tuesdayonly/Makefile])
AC_CONFIG_FILES([examples/rot13/Makefile])
AC_CONFIG_FILES([server/Makefile])
AC_CONFIG_FILES([ip/Makefile])
AC_CONFIG_FILES([ip6/Makefile])
AC_CONFIG_FILES([local/Makefile])
AC_CONFIG_FILES([location/Makefile])
AC_CONFIG_FILES([bluetooth/Makefile])
AC_CONFIG_FILES([mime/Makefile])
AC_CONFIG_FILES([simple/Makefile])
AC_CONFIG_FILES([stat/Makefile])
AC_CONFIG_FILES([ssl/Makefile])
AC_CONFIG_FILES([http/Makefile])
AC_CONFIG_FILES([sconesite/Makefile])
AC_CONFIG_FILES([image/Makefile])
AC_CONFIG_FILES([markdown/Makefile])
AC_CONFIG_FILES([exec/Makefile])
AC_CONFIG_FILES([forward/Makefile])
AC_CONFIG_FILES([tftp/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([testbuilder/Makefile])
AC_CONFIG_FILES([lettuce/Makefile])
AC_CONFIG_FILES([mysql/Makefile])
AC_CONFIG_FILES([sqlite/Makefile])
AC_CONFIG_FILES([smtp/Makefile])
AC_CONFIG_FILES([rss/Makefile])
AC_CONFIG_FILES([maths/Makefile])
AC_CONFIG_FILES([ui/Makefile])

AC_OUTPUT

AC_MSG_RESULT([
------------------------------------------------------------------------------
$PACKAGE-$VERSION is now configured as follows:
  Target:          $target
  Compiler:        $CXX $CXXFLAGS
  Source path:     $srcdir  Install prefix:  $prefix

The following modules will be built:
  + server         $SERVER
  + ip             $IP
  + ip6            $IP6
  + local          $LOCAL
  + location       $LOCATION
  + bluetooth      $BLUETOOTH
  + mime           yes
  + simple         yes
  + stat           yes
  + http           yes
  + sconesite      $SCONESITE
  + image          $IMAGE
  + markdown       $MARKDOWN
  + ssl            $SSL
  + exec           yes   
  + forward        yes   
  + tftp           yes
  + mysql          $MYSQL
  + sqlite         $SQLITE
  + smtp	   yes
  + rss            $RSS
  + maths          $MATHS
  + ui             $UI
  + testbuilder    $TESTBUILDER
  + lettuce        $LETTUCE
  + test           yes
  + examples       $EXAMPLES
])
