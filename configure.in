AC_INIT(SconeServer,0.8.0,wedge@sconemad.com)

AC_PREREQ(2.57)
AC_CONFIG_SRCDIR([sconex/sconex.h])

AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED([TARGET],["$target"],[Target Architecture])

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

# Check testbuilder scripts are upto date
test -d /var/testbuilder/scripts && test -d testbuilder/scripts && cp -fu testbuilder/scripts/* /var/testbuilder/scripts/

AC_DISABLE_STATIC

# Programs
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

# Libraries
AC_CHECK_LIB([dl],[dlopen])

AC_CHECK_LIB([pthread],[pthread_create])
AC_CHECK_LIB([c_r],[pthread_create],
  [LIBS="$LIBS -pthread"
  AC_DEFINE(HAVE_LIBPTHREAD)])

AC_CHECK_FUNCS([gethostbyname],[],[AC_CHECK_LIB([nsl],[gethostbyname],,
  [AC_CHECK_LIB([socket],[gethostbyname])])]
)
AC_CHECK_FUNCS([setsockopt],,[AC_CHECK_LIB([socket],[setsockopt])])

AC_CHECK_LIB([pcre],[pcre_compile])

# router:ip module
# Always include this unless explicitly told not to
AC_ARG_WITH([ip],
  [AC_HELP_STRING([--with-ip],[Enable IP4 sockets])],
  [ROUTER_IP="$withval"],
  [ROUTER_IP="yes"]
)

# router:ip6 module
# Include if ip6 headers are present
AC_ARG_WITH([ip6],
  [AC_HELP_STRING([--with-ip6],[Enable IP6 sockets])],
  [ROUTER_IP6="$withval"],
  [AC_CHECK_HEADER([netinet/ip6.h],[ROUTER_IP6="yes"],[ROUTER_IP6="no"])]
)

# router:local module
# Always include this unless explicitly told not to
AC_ARG_WITH([local],
  [AC_HELP_STRING([--with-local],[Enable local (UNIX domain) sockets])],
  [ROUTER_LOCAL="$withval"],
  [ROUTER_LOCAL="yes"]
)

# router:bluetooth module
# Include if bluetooth headers are present
AC_ARG_WITH([bluetooth],
  [AC_HELP_STRING([--with-bluetooth],[Enable bluetooth sockets])],
  [ROUTER_BLUETOOTH="$withval"],
  [AC_CHECK_HEADER([bluetooth/bluetooth.h],[ROUTER_BLUETOOTH="yes"],[ROUTER_BLUETOOTH="no"])]
)

# SSL module
# Include if OpenSSL headers are found
AC_ARG_WITH([openssl_path],
  [AC_HELP_STRING([--with-openssl-path=PATH],[Set path to OpenSSL])],
  [CPPFLAGS="$CPPFLAGS -I$withval/include";],
)
AC_ARG_WITH([ssl],
  [AC_HELP_STRING([--with-ssl],[Enable secure sockets module])],
  [SSL="$withval"],
  [AC_CHECK_HEADER([openssl/ssl.h],[SSL="yes"],[SSL="no"])]
)
if test "x$SSL" == "xyes"; then
  AC_CHECK_HEADER([openssl/ssl.h],,
    [AC_MSG_ERROR([header file <openssl/ssl.h> is required for OpenSSL, use --with-openssl-path=PATH])]
  )
  AC_CHECK_LIB([crypto],[CRYPTO_new_ex_data],
    [SSL_LIBADD="$SSL_LIBADD -lcrypto"],
    [AC_MSG_ERROR([library 'crypto' is required for OpenSSL])]
  )
  AC_CHECK_LIB([ssl],[SSL_library_init],
    [SSL_LIBADD="$SSL_LIBADD -lssl"],
    [AC_MSG_ERROR([library 'ssl' is required for OpenSSL])]
  )
  AC_SUBST(SSL_LIBADD)
fi

# Example modules
# Always build these unless explicitly told not to
AC_ARG_WITH([examples],
  [AC_HELP_STRING([--with-examples],[Enable building of example code])],
  [EXAMPLES="$withval"],
  [EXAMPLES="yes"]
)

# TestBuilder module
AC_ARG_WITH([testbuilder],
  [AC_HELP_STRING([--with-testbuilder],[Enable TestBuilder module])],
  [TESTBUILDER="$withval"],
  [TESTBUILDER="yes"]
)

# Lettuce module
AC_ARG_WITH([lettuce],
  [AC_HELP_STRING([--with-lettuce],[Enable Lettuce module])],
  [LETTUCE="$withval"],
  [LETTUCE="yes"]
)

# Sconesite module
AC_ARG_WITH([sconesite],
  [AC_HELP_STRING([--with-sconesite],[Enable Sconesite module])],
  [SCONESITE="$withval"],
  [SCONESITE="yes"]
)
## if we use libxml for sconesite:
if test "x$SCONESITE" == "xyes"; then
  AC_CHECK_LIB([xml2],[xmlNewDoc],
    [CPPFLAGS="$CPPFLAGS `xml2-config --cflags`"],
    [AC_MSG_ERROR([library 'xml2' is required for Sconesite])]
  )
fi

# Sconesite:image module
AC_ARG_WITH([sconesite-image],
  [AC_HELP_STRING([--with-sconesite-image],[Enable Sconesite:image module])],
  [SCONESITE_IMAGE="$withval"],
  [SCONESITE_IMAGE="yes"]
)
 Need ImageMagick for Sconesite:image
if test "x$SCONESITE_IMAGE" == "xyes"; then
  AC_CHECK_LIB([Magick++],[InitializeMagick],
    [CPPFLAGS="$CPPFLAGS `Magick++-config --cppflags`"
     SCONESITE_IMAGE_LIBADD=`Magick++-config --libs`
     AC_SUBST(SCONESITE_IMAGE_LIBADD)
     SCONESITE_IMAGE_LDFLAGS=`Magick++-config --ldflags`
     AC_SUBST(SCONESITE_IMAGE_LDFLAGS)],
    [AC_MSG_ERROR([library 'Magick++' is required for Sconesite:image])]
  )
fi

# Checks for header files.
AC_LANG_CPLUSPLUS
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([arpa/inet.h errno.h fcntl.h malloc.h netdb.h netinet/in.h])
AC_CHECK_HEADERS([stdlib.h sys/ioctl.h sys/socket.h sys/stat.h sys/signal.h])
AC_CHECK_HEADERS([sys/types.h sys/wait.h sys/uio.h signal.h stdio.h])
AC_CHECK_HEADERS([pthread.h unistd.h])
AC_CHECK_HEADERS([string iostream iomanip fstream sstream map list queue stack set])
AC_CHECK_HEADERS([tr1/unordered_map ext/hash_map])
AC_CHECK_HEADERS([pcre.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_FUNC_STAT

AC_CHECK_FUNCS([dup2 gethostbyaddr gethostbyname memmove memset select socket])
AC_CHECK_FUNCS([inet_aton inet_pton inet_ntop])

AC_CACHE_CHECK(
  [for msg_control in msghdr],
  [ol_cv_msghdr_msg_control],
  [AC_COMPILE_IFELSE(
    [#include <sys/types.h>
     #include <sys/socket.h>
     int main(int,char**) {
       struct msghdr m;
       m.msg_control=(struct cmsghdr *)0;
     }],
    [ol_cv_msghdr_msg_control=yes],
    [ol_cv_msghdr_msg_control=no])])
if test $ol_cv_msghdr_msg_control = "yes" ; then
  AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL,1,[define if struct msghdr has msg_control]\
)
fi

AC_CACHE_CHECK(
  [for socklen_t],
  [ac_cv_c_socklen_t],
  [AC_COMPILE_IFELSE(
    [#include <sys/types.h>
     #include <sys/socket.h>
     int main(int,char**) {
       socklen_t sl;
     }],
    [ac_cv_c_socklen_t=yes],
    [ac_cv_c_socklen_t=no])])
if test $ac_cv_c_socklen_t = "no" ; then
  AC_DEFINE(socklen_t,unsigned int,[define socklen_t to unsigned int if not present])
fi

# Set module build flags
AM_CONDITIONAL(BUILD_ROUTER_IP, test x$ROUTER_IP = xyes)
AM_CONDITIONAL(BUILD_ROUTER_IP6, test x$ROUTER_IP6 = xyes)
AM_CONDITIONAL(BUILD_ROUTER_LOCAL, test x$ROUTER_LOCAL = xyes)
AM_CONDITIONAL(BUILD_ROUTER_BLUETOOTH, test x$ROUTER_BLUETOOTH = xyes)
AM_CONDITIONAL(BUILD_SSL, test x$SSL = xyes)
AM_CONDITIONAL(BUILD_EXAMPLES, test x$EXAMPLES = xyes)
AM_CONDITIONAL(BUILD_TESTBUILDER, test x$TESTBUILDER = xyes)
AM_CONDITIONAL(BUILD_LETTUCE, test x$LETTUCE = xyes)
AM_CONDITIONAL(BUILD_SCONESITE, test x$SCONESITE = xyes)
AM_CONDITIONAL(BUILD_SCONESITE_IMAGE, test x$SCONESITE_IMAGE = xyes)

CPPFLAGS="$CPPFLAGS -Wall"

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([sconex/Makefile])
AC_CONFIG_FILES([doc/Makefile])
AC_CONFIG_FILES([doc/html/Makefile])
AC_CONFIG_FILES([doc/examples/Makefile])
AC_CONFIG_FILES([doc/examples/tuesdayonly/Makefile])
AC_CONFIG_FILES([doc/examples/rot13/Makefile])
AC_CONFIG_FILES([router/Makefile])
AC_CONFIG_FILES([router/ip/Makefile])
AC_CONFIG_FILES([router/ip6/Makefile])
AC_CONFIG_FILES([router/local/Makefile])
AC_CONFIG_FILES([router/bluetooth/Makefile])
AC_CONFIG_FILES([mime/Makefile])
AC_CONFIG_FILES([simple/Makefile])
AC_CONFIG_FILES([stat/Makefile])
AC_CONFIG_FILES([ssl/Makefile])
AC_CONFIG_FILES([http/Makefile])
AC_CONFIG_FILES([http/getfile/Makefile])
AC_CONFIG_FILES([http/dirindex/Makefile])
AC_CONFIG_FILES([http/errorpage/Makefile])
AC_CONFIG_FILES([exec/Makefile])
AC_CONFIG_FILES([forward/Makefile])
AC_CONFIG_FILES([tftp/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([testbuilder/Makefile])
AC_CONFIG_FILES([lettuce/Makefile])
AC_CONFIG_FILES([sconesite/Makefile])
AC_CONFIG_FILES([sconesite/image/Makefile])

AC_OUTPUT

AC_MSG_RESULT([
------------------------------------------------------------------------------
$PACKAGE-$VERSION is now configured as follows:
  Target:          $target
  Compiler:        $CPP $CPPFLAGS
  Source path:     $srcdir
  Install prefix:  $prefix

The following modules will be built:
  + router         yes
    + ip           $ROUTER_IP
    + ip6          $ROUTER_IP6
    + local        $ROUTER_LOCAL
    + bluetooth    $ROUTER_BLUETOOTH
  + mime           yes
  + simple         yes
  + stat           yes
  + http           yes
    + getfile      yes
    + dirindex     yes
    + errorpage    yes
    + sconesite    $SCONESITE
      + image      $SCONESITE_IMAGE
  + ssl            $SSL
  + exec           yes   
  + forward        yes   
  + tftp           yes
  + test           yes
  + examples       $EXAMPLES
  + testbuilder    $TESTBUILDER
  + lettuce        $LETTUCE
])
