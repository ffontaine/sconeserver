# SconeServer (http://www.sconemad.com)
# Router module configuration file

# Load router sub-modules

 insmod("ip");
 insmod("ip6");
 insmod("local");
 insmod("bluetooth");

###========================================------------------------------------
## ROUTE: common
#
# All connections should be initially channeled through this route, 
# to allow total stats to be measured and to provide a common point for any
# authorisation, validation, etc. that may be required.
#

 add("common");
  common.add("stat","all");


###========================================------------------------------------
## ROUTE: http
#
# HTTP web server
#

 add("http");
  http.add("router","common");

# Record separate http statistics
  http.add("stat","http");

# uncomment this to dump http transactions for debugging
#  http.add("debug","http");

# Use a 1KB buffer
  http.add("buffer",1024,1024);

# Connect up the webserver module (this should always come last in the chain)
  http.add("http");

# Listen on standard http port.
  http.listen( ip.addr("*","http") );

# Also listen on port 8080, so we can still test if  we're not running as root.
  http.listen( ip.addr("*",8080) );


###========================================------------------------------------
## ROUTE: https
#
# HTTPS secure web server
#

 add("https");
  https.add("router","common");

# Record separate secure http statistics
  https.add("stat","https");

# Use a 1KB buffer
  https.add("buffer",1024,1024);

# Encrypt/decrypt using SSL, using default channel profile
  https.add("ssl","default");

# uncomment this to dump https transactions (before encryption)
#  https.add("debug","https");

# Connect up the webserver module (this should always come last in the chain)
  https.add("http","secure");

# Listen on standard https port.
  https.listen( ip.addr("*","https") );

# Also listen on port 8443, so we can still test if  we're not running as root.
  https.listen( ip.addr("*",8443) );


###========================================------------------------------------
## ROUTE: simple
#
# Simple TCP/IP services
# These are mainly used for testing and debugging purposes.

 add("simple");
  simple.add("router","common");

# Record separate simple services statistics
  simple.add("stat","simple");

# Connect up simple module, let it work out the service from the conneted port.
  simple.add("simple");

# Listen on standard ports associated with simple TCP/IP services.
  if (root) {
    simple.listen( ip.addr("*","echo") );
    simple.listen( ip.addr("*","discard") );
    simple.listen( ip.addr("*","daytime") );
    simple.listen( ip.addr("*","chargen") );
    simple.listen( ip.addr("*","time") );
  }

###========================================------------------------------------
## ROUTE: config
#
# Access to configuration console
#

 add("config");

# Note: don't include this in 'all' statistics.

# Connect up configuration console
# WARNING: at the moment there is no authentication done on config terminal 
# connections.
  config.add("config");

# Listen for config connections, uncomment to activate:
#  config.listen( ip.addr("localhost",8010) );
#  config.listen( ip6.addr("localhost",8010) );
#  config.listen( bluetooth.addr("*",4) );
  config.listen( local.addr("config-socket") );

# Only local (UNIX domain) is activated by default - you should be able to 
# connect to this using the localterm script in test, like this:
#
#   $ test/scripts/localterm config-socket
#